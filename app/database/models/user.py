from sqlalchemy import String, Boolean, ForeignKey # Removed Integer as id is from Base
from sqlalchemy.orm import Mapped, relationship, mapped_column
from typing import List, Optional
from .base_model import Base
from .role_permission import user_roles_association # Assuming this defines the table correctly

class User(Base):
    # __tablename__ will be "users" (generated by Base)
    # As per SSR 8.4.18 (was 8.4.4 in older SSR)

    email: Mapped[str] = mapped_column(String(255), unique=True, index=True, nullable=False)
    hashed_password: Mapped[str] = mapped_column(String(255), nullable=False)
    full_name: Mapped[Optional[str]] = mapped_column(String(255), nullable=True)
    is_active: Mapped[bool] = mapped_column(Boolean, default=True, nullable=False)
    is_superuser: Mapped[bool] = mapped_column(Boolean, default=False, nullable=False)
    # username: Mapped[Optional[str]] = mapped_column(String(100), unique=True, index=True, nullable=True) # If separate username needed

    roles: Mapped[List["Role"]] = relationship( # Forward reference "Role"
        "Role",
        secondary=user_roles_association,
        back_populates="users"
    )

    def __repr__(self):
        return f"<User(id={self.id}, email='{self.email}')>"