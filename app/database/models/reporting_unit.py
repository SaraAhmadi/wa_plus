from sqlalchemy import String, Float, Text, ForeignKey, Integer
from sqlalchemy.orm import relationship, Mapped, mapped_column
from typing import List, Optional, Any # For type hints
from geoalchemy2 import Geometry
from .base_model import Base


class ReportingUnit(Base):
    # __tablename__ will be "reporting_units" (generated by Base)
    # As per SSR 8.4.1

    name: Mapped[str] = mapped_column(String(255), nullable=False, index=True)
    code: Mapped[Optional[str]] = mapped_column(String(100), unique=True, nullable=True, index=True)
    description: Mapped[Optional[str]] = mapped_column(Text, nullable=True)
    area_sqkm: Mapped[Optional[float]] = mapped_column(Float, nullable=True)
    geom: Mapped[Optional[Any]] = mapped_column(Geometry(geometry_type='MULTIPOLYGON', srid=4326, spatial_index=True), nullable=True) # Keep spatial_index=True

    unit_type_id: Mapped[int] = mapped_column(ForeignKey('reporting_unit_types.id'), nullable=False)
    parent_unit_id: Mapped[Optional[int]] = mapped_column(ForeignKey('reporting_units.id'), nullable=True, index=True)

    unit_type: Mapped["ReportingUnitType"] = relationship(back_populates="reporting_units") # Forward reference
    parent_unit: Mapped[Optional["ReportingUnit"]] = relationship(remote_side=[Base.id], back_populates="child_units")
    child_units: Mapped[List["ReportingUnit"]] = relationship(back_populates="parent_unit") # For easier traversal

    # Relationships to other tables
    indicator_timeseries: Mapped[List["IndicatorTimeseries"]] = relationship(back_populates="reporting_unit")
    cropping_patterns: Mapped[List["CroppingPattern"]] = relationship(back_populates="reporting_unit")
    infrastructure_items: Mapped[List["Infrastructure"]] = relationship(back_populates="reporting_unit")
    financial_accounts: Mapped[List["FinancialAccount"]] = relationship(back_populates="reporting_unit")

    def __repr__(self):
        return f"<ReportingUnit(id={self.id}, name='{self.name}')>"