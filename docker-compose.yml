version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: waplus_dashboard
    restart: unless-stopped
    env_file: .env
    environment:
      - APP_ENV=${APP_ENV:-development}
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - GEOSERVER_URL=http://geoserver:8080/geoserver
      - REDIS_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - PYTHONPATH=/app
    volumes:
      - ./app:/app/app
      - ./static:/app/static
      - ./data_ingestion:/app/data_ingestion
      - ./alembic:/app/alembic
      - ./alembic.ini:/app/alembic.ini
      - ./gunicorn_conf.py:/app/gunicorn_conf.py
      - ./pyproject.toml:/app/pyproject.toml
      - ./poetry.lock:/app/poetry.lock
      - ./entrypoint.sh:/app/entrypoint.sh
    ports:
      - "${APP_PORT:-8000}:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      geoserver:
        condition: service_healthy
    networks:
      - waplus_network

  db:
    image: postgis/postgis:15-3.3
    container_name: waplus_db
    restart: unless-stopped
    env_file: .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/initdb:/docker-entrypoint-initdb.d
    ports:
      - "${POSTGRES_EXPOSED_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -h db"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - waplus_network

  geoserver:
    image: kartoza/geoserver:2.23.0
    container_name: waplus_geoserver
    restart: unless-stopped
    env_file: .env
    volumes:
      - geoserver_data:/opt/geoserver/data_dir
    ports:
      - "${GEOSERVER_EXPOSED_PORT:-8080}:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://geoserver:8080/geoserver/web/"]
      interval: 30s
      timeout: 10s
      retries: 5
    depends_on:
      db:
        condition: service_healthy
    networks:
      - waplus_network

  redis:
    image: redis:7-alpine
    container_name: waplus_redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_EXPOSED_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - waplus_network

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: waplus_pgadmin
    restart: unless-stopped
    env_file: .env
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "${PGADMIN_EXPOSED_PORT:-5050}:80"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - waplus_network

  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: waplus_celery_worker
    command: celery -A app.worker.celery_app worker --loglevel=info
    restart: unless-stopped
    env_file: .env
    environment:
      - PYTHONPATH=/app
      - APP_ENV=${APP_ENV:-development}
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
    volumes:
      - ./app:/app/app
      - ./data_ingestion:/app/data_ingestion
      - ./pyproject.toml:/app/pyproject.toml
      - ./poetry.lock:/app/poetry.lock
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - waplus_network

  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: waplus_celery_beat
    command: celery -A app.worker.celery_app beat --loglevel=info -S redbeat.RedBeatScheduler
    restart: unless-stopped
    env_file: .env
    environment:
      - PYTHONPATH=/app
      - APP_ENV=${APP_ENV:-development}
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_REDBEAT_REDIS_URL=redis://redis:6379/2
    volumes:
      - ./app:/app/app
      - ./data_ingestion:/app/data_ingestion
      - ./pyproject.toml:/app/pyproject.toml
      - ./poetry.lock:/app/poetry.lock
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - waplus_network

  traefik:
    image: traefik:v2.10
    container_name: waplus_traefik
    command:
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
    ports:
      - "80:80"
      - "443:443"
      - "8081:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - waplus_network

#  flower:
#    image: mher/flower
#    command: flower --app=app.worker.celery_app --port=5555 --broker=redis://redis:6379/1
#    ports:
#      - "5555:5555"
#    depends_on:
#      - redis
#      - celery_worker
#    networks:
#      - waplus_network
#    environment:
#      - CELERY_BROKER_URL=redis://redis:6379/0  # Must match worker

volumes:
  postgres_data:
  geoserver_data:
  redis_data:
  pgadmin_data:
  celery_beat_volume:  # Added for Celery Beat persistence

networks:
  waplus_network:
    driver: bridge